[
["index.html", "CNC Fly Food Dispenser 1 About 1.1 Overview 1.2 Github 1.3 Contact 1.4 Colophon", " CNC Fly Food Dispenser Matt Wayland 2017-06-18 1 About Figure 1.1: Robot 1.1 Overview Figure 1.1 1.2 Github 1.3 Contact Matt Wayland 1.4 Colophon This book was produced using the bookdown package (Xie 2017), which was built on top of R Markdown and knitr (Xie 2015). References "],
["intro.html", "2 Introduction", " 2 Introduction The fruit fly, Drosophila melanogaster, is one of the most important model organisms in biological research. Maintaining stocks of fruit flies in the laboratory is labour-intensive. One task which lends itself to automation is the production of the vials of food in which the flies are reared. Fly facilities typically have to generate several thousand vials of fly food each week to sustain their fly stocks. The system presented here combines a cartesian coordinate robot with a peristaltic pump. The design of the robot is based on the Routy CNC Router created by Mark Carew (http://openbuilds.org/builds/routy-cnc-router-v-slot-belt-pinion.101/), and uses belt and pully actuators for the X and Y axes, and a leadscrew actuator for the Z axis. CNC motion and operation of the peristaltic pump are controlled by grbl (https://github.com/gnea/grbl), an open source, embedded, high performance g-code parser. Grbl is written in optimized C and runs directly on an Arduino. A Raspberry Pi is used to generate and stream G-code instructions to Grbl. A touch screen on the Raspberry Pi provides a graphical user interface to the system. This manual explains how to install the required software and operate the robot. Instructions for building the hardware are available on DocuBricks. A Raspberry Pi is used to generate and stream G-code to the Arduino. A touch screen on the Raspberry Pi provides the user interface; a resistive rather than capacitive touch screen was chosen so that it could be operated by a person wearing gloves. knitr::include_graphics(“images/system.jpg”) You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 2. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa "],
["grbl-installation-and-configuration.html", "3 Grbl installation and configuration 3.1 Overview 3.2 Flashing Grbl to Arduino 3.3 Check connection to Arduino 3.4 fine adjustment of motors", " 3 Grbl installation and configuration 3.1 Overview CNC motion control is provided by grbl (https://github.com/gnea/grbl), an open source, embedded, high performance g-code parser. Grbl is written in optimized C and runs directly on an Arduino. This is used in conjunction with the gShield (formerly known as grblshield) which provides the hardware drivers for the stepper motors. Grbl sends out TTL signals on pins A3 and 13 or the Arduino to control coolant flow and spindle direction, respectively. Here these signals are used to remotely control a peristaltic pump. 3.2 Flashing Grbl to Arduino To flash Grbl to the Arduino you will need a computer with the latest version of the Arduino IDE installed. The following instructions for flashing Grbl to the Arduino are taken from: https://github.com/gnea/grbl/wiki/Compiling-Grbl NOTE: Before starting, delete prior Grbl library installations from the Arduino IDE. Otherwise, you’ll have compiling issues! On a Mac, Arduino libraries are located in ~/Documents/Arduino/libraries/. On Windows, it’s in My Documents\\Arduino\\libraries. Download the Grbl source code. Open the following page in your web browser: https://github.com/gnea/grbl Click on the &lt;&gt;Code Tab Click the Clone or Download green button on the Grbl home page. Click the Download ZIP Unzip the download and you’ll have a folder called grbl-XXX, where XXX is the release version. Launch the Arduino IDE Make sure you are using the most recent version of the Arduino IDE! Figure 3.1: Arduino IDE Load Grbl into the Arduino IDE as a Library. Click the Sketch drop-down menu, navigate to Include Library and select Add .ZIP Library. IMPORTANT: Select the Grbl folder inside the grbl-XXX folder, which only contains the source files and an example directory. Figure 3.2: Loading Grbl library into the Arduino IDE If you accidentally select the .zip file or the wrong folder, you will need to navigate to your Arduino library, delete the mistake, and re-do Step 3. Open the GrblUpload Arduino example. Click the File down-down menu, navigate to Examples-&gt;Grbl, and select GrblUpload. Figure 3.3: GrblUpload example file Compile and upload Grbl to your Arduino. Connect your computer directly to the Arduino using the USB cable. Figure 3.4: Laptop connected directly to Arduino Make sure your board is set to the Arduino Uno in the Tool-&gt;Board menu and the serial port is selected correctly in Tool-&gt;Serial Port. Click the Upload, and Grbl should compile and flash to your Arduino! (Flashing with a programmer also works by using the Upload Using Programmer menu command.) 3.3 Check connection to Arduino NOTE: Before powering up the gShield and motors, check that the actuator carriages for all three axes are approximately centred. Initially we do not know in which direction the actuators carriages will travel when G-code commands are issued, so positioning each in the middle of its range reduces the likelihood of collisions with the end stops. (#fig:actuators_centred)Actuator carriages centred in preparation for powering-up motors for first time. Check that the acutuator carriages for all three axes are centred 3.4 fine adjustment of motors "],
["raspberry-pi-setup.html", "4 Raspberry Pi setup", " 4 Raspberry Pi setup https://learn.adafruit.com/adafruit-pitft-28-inch-resistive-touchscreen-display-raspberry-pi/easy-install https://s3.amazonaws.com/adafruit-raspberry-pi/2016-10-18-pitft-28r.zip https://www.raspberrypi.org/documentation/installation/installing-images/ sudo raspi-config (expand filesystem) sudo reboot /etc/dhcpcd.conf interface eth0 static ip_address=192.168.2.2/24 static routers=192.168.2.1 static domain_name_servers=192.168.2.1 "],
["creating-jobs-in-g-code.html", "5 Creating jobs in G-code", " 5 Creating jobs in G-code Running job without GUI - for testing "],
["trouble-shooting.html", "6 Trouble-shooting", " 6 Trouble-shooting "],
["references.html", "References", " References "]
]
